import type { Team } from './team.js';


/**
 * Invitation hash. It's used to invite users to team
 */
export type InvitationHash = string;

/**
 * Notes settings entity
 */
export default interface NoteSettings {
  /**
   * Just unique property identifier
   */
  id: number;

  /**
   * Related note id
   */
  noteId: number;

  /**
   * Custom hostname
   */
  customHostname?: string ;

  /**
   * Is note public for everyone or only for collaborators
   */
  isPublic: boolean;

  /**
   * Invitation hash
   */
  invitationHash: InvitationHash;

  /**
   * Link to note's cover
   */
  cover: string;

  /**
   * Team members. Team is empty by default because note creator is not stored in team
   */
  team?: Team;
}

/**
 * Attributes of public note settings
 */
type NoteSettingsPublicProperties = 'customHostname' | 'isPublic' | 'invitationHash' | 'team' | 'cover' ;

export interface NoteSettingsPublic extends Pick<NoteSettings, NoteSettingsPublicProperties> {}

/**
 * Define note settings for public usage
 *
 * @param noteSettings - note settings data
 */
export function definePublicNoteSettings(noteSettings: NoteSettings): NoteSettingsPublic {
  return {
    customHostname: noteSettings.customHostname,
    isPublic: noteSettings.isPublic,
    invitationHash: noteSettings.invitationHash,
    team: noteSettings.team,
    cover: noteSettings.cover,
  };
}

/**
 * Notes settings creation attributes, omitting id, because it's generated by database
 */
type NoteSettingsCreationAttributes = Omit<NoteSettings, 'id' |'cover'>;

export type {
  NoteSettingsCreationAttributes
};
