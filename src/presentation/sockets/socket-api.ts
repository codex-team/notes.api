import { CTProtoServer } from "ctproto";

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è CTProto
 */
interface AuthRequestPayload {
  token: string;
}

interface AuthResponsePayload {
  userId: string;
  username?: string;
}

interface ApiRequest {
  messageId: string;
  type: string;
  payload: any;
}

interface ApiResponse {
  messageId: string;
  type: string;
  payload: any;
}

interface ApiUpdate {
  messageId: string;
  type: string;
  payload: any;
}

export default class SocketApi {
  private ctproto: CTProtoServer<
    AuthRequestPayload,
    AuthResponsePayload,
    ApiRequest,
    ApiResponse,
    ApiUpdate
  >;

  private config: { host: string; port: number };

  constructor(config: { host: string; port: number }) {
    this.config = config;
    this.ctproto = new CTProtoServer({
      port: this.config.port,

      async onAuth(authRequestPayload: AuthRequestPayload): Promise<AuthResponsePayload> {
        console.log("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞:", authRequestPayload.token);

        if (!authRequestPayload.token || authRequestPayload.token !== "valid-token") {
          throw new Error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω");
        }

        return {
          userId: "111",
          username: "TestUser",
        };
      },

      async onMessage(message: ApiRequest): Promise<ApiResponse> {
        console.log("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:", message);

        if (message.type === "note:join") {
          return {
            messageId: message.messageId,
            type: "response",
            payload: { status: "joined", noteId: message.payload.noteId },
          };
        }

        return {
          messageId: message.messageId,
          type: "error",
          payload: "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
        };
      },
    });

    console.log(`‚úÖ CTProto-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.config.port}`);
  }
}
